version: 2.1

jobs:
  build:
    docker:
      - image: circleci/python:3.8.5

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      #- run:
      #    name: run tests
      #    command: |
      #      . venv/bin/activate
      #      python manage.py test

      #- store_artifacts:
      #    path: test-reports
      #    destination: test-reports

      - setup_remote_docker:
          version: 19.03.13

      - run: |
          if [[ -z "${CIRCLE_TAG}" ]]; then
            TAG=0.1.$CIRCLE_BUILD_NUM
          else
            TAG="${CIRCLE_TAG}"
          fi
          echo "$TAG" | tee /tmp/VERSION
          mkdir -vp ~/.docker/cli-plugins/
          curl --silent -L "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker buildx version
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker context create buildcontext
          docker buildx create buildcontext --use
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker buildx build --progress plain --push -t ${CIRCLE_PROJECT_USERNAME}/k8s-sidecar-build:$TAG --platform linux/amd64,linux/arm64,linux/arm/v7 .

      - persist_to_workspace:
          root: /tmp
          paths:
            - VERSION

  test-k8s-1-14:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.14.10
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-15:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.15.12
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-16:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.16.15
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-17:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.17.17
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-18:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.18.15
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-19:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.19.7
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  test-k8s-1-20:
    machine: true
    environment:
      KIND_VERSION: v0.10.0
      K8S_VERSION: v1.20.2
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - run: |
          VERSION=`cat /tmp/VERSION`
          sed -i 's/SIDECAR_VERSION/'"$VERSION"'/g' .circleci/test/sidecar.yaml
          sed -i 's/CIRCLE_PROJECT_USERNAME/'"$CIRCLE_PROJECT_USERNAME"'/g' .circleci/test/sidecar.yaml
          cat .circleci/test/sidecar.yaml
      - run:
          name: test-in-cluster
          command: .circleci/test-in-cluster.sh
          no_output_timeout: 3600

  deploy:
    docker:
      - image: circleci/python:3.8.5
    steps:
      - attach_workspace:
          at: /tmp/
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      - run: |
          TAG=`cat /tmp/VERSION`
          mkdir -vp ~/.docker/cli-plugins/
          curl --silent -L "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker buildx version
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker context create buildcontext
          docker buildx create buildcontext --use
          echo $DOCKER_PASSWORD   | docker login -u $DOCKER_USERNAME   --password-stdin docker.io
          echo "FROM ${CIRCLE_PROJECT_USERNAME}/k8s-sidecar-build:$TAG" \
            | docker buildx build \
            --push \
            --progress plain \
            --tag docker.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar:$TAG \
            --tag docker.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar:latest \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            -
          echo "Replicating manifest list to quay.io"
          echo $QUAY_BOT_PASSWORD | docker login -u $QUAY_BOT_USERNAME --password-stdin quay.io
          target_repo="quay.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar"
          echo '{"experimental":"enabled"}' > ~/.docker/config.json
          manifest=$(docker manifest inspect "docker.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar:$TAG")
          taglist=()
          for line in $(echo "$manifest" | jq '.manifests[]' -rc)
          do
            architecture=$(echo "$line" | jq .platform.architecture -rc)
            digest=$(echo "$line" | jq .digest -rc)
            target_image="${target_repo}:$TAG-${architecture}"
            echo "Pulling and pushing image for $architecture - $target_image"
            docker pull "docker.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar@$digest"
            docker tag "docker.io/${CIRCLE_PROJECT_USERNAME}/k8s-sidecar@$digest" "$target_image"
            docker push "$target_image"
            taglist+=("$target_image")
          done
          echo "Creating manifest list for quay.io"
          docker manifest create "${target_repo}:$TAG" ${taglist[@]}
          docker manifest create "${target_repo}:latest" ${taglist[@]}
          echo "Annotating manifest list with architectures"
          for manifest_tag in ${taglist[@]}
          do
            docker manifest annotate --os linux --arch $(echo "${manifest_tag}" | rev | cut -d'-' -f1 | rev) "${target_repo}:$TAG" "${manifest_tag}"
            docker manifest annotate --os linux --arch $(echo "${manifest_tag}" | rev | cut -d'-' -f1 | rev) "${target_repo}:latest" "${manifest_tag}"
          done
          echo "Pusing manifest list to quay.io"
          docker manifest push "${target_repo}:$TAG"
          docker manifest push "${target_repo}:latest"

workflows:
  version: 2
  test_deploy:
    jobs:
      - build:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
#      - test-k8s-1-14:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-15:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-16:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-17:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-18:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-19:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
#      - test-k8s-1-20:
#          filters:  # required since `deploy` has tag filters AND requires `build`
#            tags:
#              only: /.*/
#          requires:
#            - build
      - deploy:
          requires:
            - build
#            - test-k8s-1-15
#            - test-k8s-1-16
#            - test-k8s-1-17
#            - test-k8s-1-18
#            - test-k8s-1-19
#            - test-k8s-1-20
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
